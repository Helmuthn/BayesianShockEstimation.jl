var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BayesianShockEstimation","category":"page"},{"location":"#BayesianShockEstimation","page":"Home","title":"BayesianShockEstimation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BayesianShockEstimation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are three main parts of the code for this project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pushing Densities into Shockwaves\nGodunov scheme for numerically solving Burgers' equation\nRTS Sampling of a random walk","category":"page"},{"location":"","page":"Home","title":"Home","text":"The novelty in this work comes from the numerical computation of shockwave densities, while the other sections can be considered standard.","category":"page"},{"location":"#Shockwave-Density","page":"Home","title":"Shockwave Density","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, we introduce two structs for configuration of the simulation.  The first focuses on the numerical details, while the second focuses on the boundary conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ShockParams\nBoundaryParams","category":"page"},{"location":"#BayesianShockEstimation.ShockParams","page":"Home","title":"BayesianShockEstimation.ShockParams","text":"ShockParams\n\nStruct containing all needed information for deterministic shock simulations\n\nParameters\n\nstepsize_x: Spatial grid size\nstepsize_t: Temporal grid size\nstepcount : Number of temporal steps\nballsize  : Integration ball size\nthreshold : Minimum shock threshold\n\n\n\n\n\n","category":"type"},{"location":"#BayesianShockEstimation.BoundaryParams","page":"Home","title":"BayesianShockEstimation.BoundaryParams","text":"BoundaryParams\n\nStruct containing all needed information for boundary sampling\n\nParameters\n\nσ_w : System noise standard deviation\nσ_v : Measurement noise standard deviation\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Using these structs for configuration, the main function in this work computes the approximate shockwave arrival rate with a given number of Monte Carlo samples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ShockDensity","category":"page"},{"location":"#BayesianShockEstimation.ShockDensity","page":"Home","title":"BayesianShockEstimation.ShockDensity","text":"ShockDensity(  systemparams::ShockParams, \n               boundaryparams::BoundaryParams, \n               observations, \n               samplecount)\n\nGenerates an approximation of the shock density function.\n\nArguments\n\nsystemparams   : Struct of parameters for system simulation\nboundaryparams : Struct of parameters for boundary simulation\nobservations   : Boundary observations\nsamplecount    : Number of Monte Carlo samples\n\nReturns\n\nA 2D array of approximate shockwave densities\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Within the function we do in-place updates to count of shockwaves from Monte Carlo samples using IncrementShockCounts!.","category":"page"},{"location":"","page":"Home","title":"Home","text":"IncrementShockCounts!","category":"page"},{"location":"#BayesianShockEstimation.IncrementShockCounts!","page":"Home","title":"BayesianShockEstimation.IncrementShockCounts!","text":"IncrementShockCounts!(shockcounts, systemparams, boundary)\n\nComputes shocks for a given boundary.\n\nArguments\n\nshockcounts     : Array of current shock counts\nsystemparams    : Struct of parameters for system simulation\nboundary_values : Boundary samples\n\nReturns\n\nA list of approximate densities\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"IncrementShockCounts! makes heavy use of rangefilter, which computes the difference magnitude of the range in some arbitrariy kernel described by an array of offset tuples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"rangefilter","category":"page"},{"location":"#BayesianShockEstimation.rangefilter","page":"Home","title":"BayesianShockEstimation.rangefilter","text":"rangefilter(image, offsets)\n\nComputes the difference between the max filter and the min filter applied to an image on a window defined by offsets.\n\nArguments\n\nimage   : The image to be filtered, 2D array\noffsets : Array of tuples representing index offsets\n\nReturns\n\nA 2D array representing the result of the range filter\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The offsets defining a particular ball can be computed using the helper function getoffsets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"getoffsets","category":"page"},{"location":"#BayesianShockEstimation.getoffsets","page":"Home","title":"BayesianShockEstimation.getoffsets","text":"getoffsets(dx, dt, radius)\n\nGets the offset indices based on step sizes and ball radius.\n\nArguments\n\ndx     : Spatial Stepsize\ndt     : Temporal Stepsize\nradius : Search Radius\n\nReturns\n\nAn array of tuples representing index offsets\n\n\n\n\n\n","category":"function"},{"location":"#Godunov-Scheme-for-Burgers'-Equation","page":"Home","title":"Godunov Scheme for Burgers' Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To numerically compute the locations of shockwaves, we use Godunov's scheme for a discretization due to the balance of computational efficiency and the lack of advection error.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is important to note that Gudonov's scheme introduces artificial viscosity into Burgers' equation, and so we only search for regions with large derivatives.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The highest level function for this section is godunov_burgers_1D_shocks, which returns a 2D array of booleans indicating the locations of shocks for given boundary conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"godunov_burgers_1D_shocks","category":"page"},{"location":"#BayesianShockEstimation.godunov_burgers_1D_shocks","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D_shocks","text":"godunov_burgers_1D_shocks(u0, dx, dt, stepcount, threshold)\n\nFinds spatial steps in the numerical solution of Burgers equation with a slope greater than the threshold. These points represent our approximations of shocks.\n\nArguments\n\nu0        : Initial Boundary Condition\ndx        : Spatial grid size\ndt        : Temporal grid size\nstepcount : Number of steps\nthreshold : slope threshold\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"One step lower level is the numerical solver itself.","category":"page"},{"location":"","page":"Home","title":"Home","text":"godunov_burgers_1D","category":"page"},{"location":"#BayesianShockEstimation.godunov_burgers_1D","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D","text":"godunov_burgers_1D(u0, dx, dt, stepcount)\n\nSolve Burgers' equation numericallly with Godunov's method\n\nArguments\n\nu0        : Initial Boundary Condition\ndx        : Spatial grid size\ndt        : Temporal grid size\nstepcount : Number of steps\n\nReturns\n\nA 2D array representing the numerical solution of Burgers' Equation\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Individual timesteps are completed using godunov_burgers_1D_step!, which operates on a pre-allocated array.","category":"page"},{"location":"","page":"Home","title":"Home","text":"godunov_burgers_1D_step!","category":"page"},{"location":"#BayesianShockEstimation.godunov_burgers_1D_step!","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D_step!","text":"godunov_burgers_1D_step!(u_next, boundary_flux, boundary_flux_right, u, dx, dt)\n\nStep Burgers' equation according to Godunov's method\n\nArguments\n\nu_next              : Array to store the value\nboundary_flux       : Array of boundary flux storage\nboundary_flux_right : Array of right boundary flux storage\nu                   : Array of values for the previous timestep\ndx                  : Spatial grid size\ndt                  : Temporal grid size\n\nReturns\n\nAn array of values for the next timestep\n\nNotes\n\nAssumes periodic boundary conditions\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The flux function for Burgers equation is represented as flux_burgers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"flux_burgers","category":"page"},{"location":"#BayesianShockEstimation.flux_burgers","page":"Home","title":"BayesianShockEstimation.flux_burgers","text":"flux_burgers(u)\n\nHelper function returns flux in from the conservation form of Burgers' Equation.\n\nArguments\n\nu : The state value\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"For any given boundary, the net flux is computed through an exact solution of the Riemann problem in riemann_solver_burgers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"riemann_solver_burgers","category":"page"},{"location":"#BayesianShockEstimation.riemann_solver_burgers","page":"Home","title":"BayesianShockEstimation.riemann_solver_burgers","text":"riemann_solver_burgers(ul, ur)\n\nSolves the Riemann problem for Burgers' equation and returns the average value. Helper function for Godunov's scheme.\n\nArguments\n\nul : The left state value\nur : The right state value\n\nReturns\n\nThe value of flux on the boundary between the regions.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Finally, there are two helper functions to deal with fused operations and periodic boundary conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"riemann_solver_burgers!\nflux_difference!","category":"page"},{"location":"#BayesianShockEstimation.riemann_solver_burgers!","page":"Home","title":"BayesianShockEstimation.riemann_solver_burgers!","text":"riemann_solver_burgers!(boundary_flux_right, u)\n\nSolve for all right boundary flux values.\n\nArguments\n\nboundary_flux_right : Output Array\nu                   : State Values\n\n\n\n\n\n","category":"function"},{"location":"#BayesianShockEstimation.flux_difference!","page":"Home","title":"BayesianShockEstimation.flux_difference!","text":"flux_difference!(boundary_flux, boundary_flux_right)\n\nCompute the difference between the right and left flux\n\nArguments\n\nboundary_flux       : output array\nboundary_flux_right : flux through right boundaries\n\n\n\n\n\n","category":"function"},{"location":"#RTS-Sampler-for-the-Random-Walk-Model","page":"Home","title":"RTS Sampler for the Random Walk Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Because the shockwave arrival rate estimation arises by pushing the boundary density through an implicit transformation, we include an implementation of an RTS sampler to sample the conditional boundary distribution given observations under a random walk model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sampler makes use of RTS smoothing variances, Kalman filter estimates, and Kalman filter variances, all of which are generated by RTS_Smooth.","category":"page"},{"location":"","page":"Home","title":"Home","text":"RTS_Smooth","category":"page"},{"location":"#BayesianShockEstimation.RTS_Smooth","page":"Home","title":"BayesianShockEstimation.RTS_Smooth","text":"RTS_Smooth(observations, σ_w, σ_v)\n\nHelper Function computing variance for RTS sampler by computing the Kalman filter estimates as well as the RTS smoother variances.\n\nApplies to the random walk model\n\nbeginaligned\nx_t+1 = x_t + w_t\ny_t     = x_t + v_t\nendaligned\n\nwhere w_t and v_t are centered Gaussian random variables with variances σ_w^2 and σ_v^2, respectively.\n\nArguments\n\nobservations : Timeseries observation\nσ_w          : System noise standard deviation\nσ_v          : Observaton noise standard deviation\n\nReturns\n\nestimates, variances, RTSvariances\n\nestimates    : Kalman filter estimates\nvariances    : Kalman filter variances\nRTSvariances : RTS smoother variances\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The results of RTS_Smooth can then be used in RTS_sample to generate a single trajectory sample according to the RTS smoothing distribution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"RTS_sample","category":"page"},{"location":"#BayesianShockEstimation.RTS_sample","page":"Home","title":"BayesianShockEstimation.RTS_sample","text":"RTS_sample(estimates, variances, RTSvariances, σ_w)\n\nSample from RTS smoother backwards sampler for random walk model.\n\nUses the Kalman filter estimates and variances, as well as the RTS variances generated by RTS_Smooth.\n\nArguments\n\nestimates    : Kalman filter estimates\nvariances    : Kalman filter variances\nRTSvariances : RTS smoother variances\nσ_w          : System noise standard deviation\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The initial Kalman filter estimates are constructed through KalmanFilterWalk.","category":"page"},{"location":"","page":"Home","title":"Home","text":"KalmanFilterWalk","category":"page"},{"location":"#BayesianShockEstimation.KalmanFilterWalk","page":"Home","title":"BayesianShockEstimation.KalmanFilterWalk","text":"KalmanFilterWalk(observations, σ_w, σ_v)\n\nComputes the Kalman filter for a random walk model.\n\nbeginaligned\nx_t+1 = x_t + w_t\ny_t     = x_t + v_t\nendaligned\n\nwhere w_t and v_t are centered Gaussian random variables with variances σ_w^2 and σ_v^2, respectively.\n\nArguments\n\nobservations : Timeseries observation\nσ_w          : System noise standard deviation\nσ_v          : Observaton noise standard deviation\n\nReturns\n\nestimates, variances\n\nestimates : Kalman filter estimates\nvariances : Kalman filter variances\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The RTS variances are constructed through BackwardsVarianceWalk.","category":"page"},{"location":"","page":"Home","title":"Home","text":"BackwardsVarianceWalk","category":"page"},{"location":"#BayesianShockEstimation.BackwardsVarianceWalk","page":"Home","title":"BayesianShockEstimation.BackwardsVarianceWalk","text":"BackwardsVarianceWalk(variances, σ_w)\n\nGiven Kalman filter variances, computes the RTS smoother variances.\n\nArguments\n\nvariances : Kalman filter variances\nσ_w       : System noise power\n\nReturns\n\nThe variances for the RTS smoother\n\n\n\n\n\n","category":"function"}]
}
