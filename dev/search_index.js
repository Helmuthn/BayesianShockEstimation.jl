var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BayesianShockEstimation","category":"page"},{"location":"#BayesianShockEstimation","page":"Home","title":"BayesianShockEstimation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BayesianShockEstimation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BayesianShockEstimation]","category":"page"},{"location":"#BayesianShockEstimation.BoundaryParams","page":"Home","title":"BayesianShockEstimation.BoundaryParams","text":"BoundaryParams\n\nStruct containing all needed information for boundary sampling\n\nParameters\n\nσ_w : System noise standard deviation\nσ_v : Measurement noise standard deviation\n\n\n\n\n\n","category":"type"},{"location":"#BayesianShockEstimation.ShockParams","page":"Home","title":"BayesianShockEstimation.ShockParams","text":"ShockParams\n\nStruct containing all need information for deterministic shock simulations\n\nParameters\n\nstepsize_x: Spatial grid size\nstepsize_t: Temporal grid size\nstepcount : Number of temporal steps\nballsize  : Integration ball size\nthreshold : Minimum shock threshold\n\n\n\n\n\n","category":"type"},{"location":"#BayesianShockEstimation.BackwardsVarianceWalk-Tuple{Any, Any}","page":"Home","title":"BayesianShockEstimation.BackwardsVarianceWalk","text":"BackwardsVarianceWalk(variances, σ_w)\n\nGiven Kalman filter variances, computes the RTS smoother variances.\n\nArguments\n\nvariances : Kalman filter variances\nσ_w       : System noise power\n\nReturns\n\nThe variances for the RTS smoother\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.BallVolume-Tuple{ShockParams}","page":"Home","title":"BayesianShockEstimation.BallVolume","text":"BallVolume(systemparams::ShockParams)::Float64\n\nHelper function that computes the volume of the integration ball\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.IncrementShockCounts!-Tuple{Any, ShockParams, Any}","page":"Home","title":"BayesianShockEstimation.IncrementShockCounts!","text":"IncrementShockCounts!(shockcounts, systemparams, boundary)\n\nComputes shocks for a given boundary.\n\nArguments\n\nshockcounts     : Array of current shock counts\nsystemparams    : Struct of parameters for system simulation\nboundary_values : Boundary samples\n\nReturns\n\nA list of approximate densities\n\nNotes\n\nUses the method of characteristics to find shocks.\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.KalmanFilterWalk-Tuple{Any, Any, Any}","page":"Home","title":"BayesianShockEstimation.KalmanFilterWalk","text":"KalmanFilterWalk(observations, σ_w, σ_v)\n\nComputes the Kalman filter for a random walk model.\n\nbeginaligned\nx_t+1 = x_t + w_t\ny_t     = x_t + v_t\nendaligned\n\nwhere wt and vt are centered Gaussian random variables with variances σw^2 and σv^2, respectively.\n\nArguments\n\nobservations : Timeseries observation\nσ_w          : System noise standard deviation\nσ_v          : Observaton noise standard deviation\n\nReturns\n\n`estimates, variances`\n\nestimates : Kalman filter estimates\nvariances : Kalman filter variances\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.RTS_Smooth-Tuple{Any, Any, Any}","page":"Home","title":"BayesianShockEstimation.RTS_Smooth","text":"RTS_Smooth(observations, σ_w, σ_v)\n\nHelper Function computing variance for RTS sampler by computing the Kalman filter estimates as well as the RTS smoother variances.\n\nApplies to the random walk model\n\nbeginaligned\nx_t+1 = x_t + w_t\ny_t     = x_t + v_t\nendaligned\n\nwhere wt and vt are centered Gaussian random variables with variances σw^2 and σv^2, respectively.\n\nArguments\n\nobservations : Timeseries observation\nσ_w          : System noise standard deviation\nσ_v          : Observaton noise standard deviation\n\nReturns\n\n`estimates, variances, RTSvariances`\n\nestimates    : Kalman filter estimates\nvariances    : Kalman filter variances\nRTSvariances : RTS smoother variances\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.RTS_sample-NTuple{4, Any}","page":"Home","title":"BayesianShockEstimation.RTS_sample","text":"RTS_sample(estimates, variances, RTSvariances, σ_w)\n\nSample from RTS smoother backwards sampler for random walk model.\n\nUses the Kalman filter estimates and variances, as well as the RTS variances generated by RTS_Smooth.\n\nArguments\n\nestimates    : Kalman filter estimates\nvariances    : Kalman filter variances\nRTSvariances : RTS smoother variances\nσ_w          : System noise standard deviation\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.ShockDensity-Tuple{ShockParams, BoundaryParams, Any, Any}","page":"Home","title":"BayesianShockEstimation.ShockDensity","text":"ShockDensity(  systemparams::ShockParams, \n               boundaryparams::BoundaryParams, \n               observations, \n               samplecount)\n\nGenerates an approximation of the shock density function.\n\nArguments\n\nsystemparams   : Struct of parameters for system simulation\nboundaryparams : Struct of parameters for boundary simulation\nobservations   : Boundary observations\nsamplecount    : Number of Monte Carlo samples\n\nReturns\n\nA 2D array of approximate shockwave densities\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.flux_burgers-Tuple{Any}","page":"Home","title":"BayesianShockEstimation.flux_burgers","text":"flux_burgers(u)\n\nHelper function returns flux in from the conservation form of Burgers' Equation.\n\nArguments\n\nu : The state value\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.flux_difference!-Tuple{Any, Any}","page":"Home","title":"BayesianShockEstimation.flux_difference!","text":"flux_difference!(boundary_flux, boundary_flux_right)\n\nCompute the difference between the right and left flux\n\nArguments\n\nboundary_flux       : output array\nboundary_flux_right : flux through right boundaries\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.godunov_burgers_1D-NTuple{4, Any}","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D","text":"godunov_burgers_1D(u0, dx, dt, stepcount)\n\nSolve Burgers' equation numericallly with Godunov's method\n\nArguments\n\nu0        : Initial Boundary Condition\ndx        : Spatial grid size\ndt        : Temporal grid size\nstepcount : Number of steps\n\nReturns\n\nA 2D array representing the numerical solution of Burgers' Equation\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.godunov_burgers_1D_shocks-NTuple{5, Any}","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D_shocks","text":"godunov_burgers_1D_shocks(u0, dx, dt, stepcount, threshold)\n\nFinds spatial steps in the numericla solution of Burgers equation with a slope greater than the threshold. These points represent our approximations of shocks.\n\nArguments\n\nu0        : Initial Boundary Condition\ndx        : Spatial grid size\ndt        : Temporal grid size\nstepcount : Number of steps\nthreshold : slope threshold\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.godunov_burgers_1D_step!-NTuple{5, Any}","page":"Home","title":"BayesianShockEstimation.godunov_burgers_1D_step!","text":"godunov_burgers_1D_step!(u_next, boundary_flux, boundary_flux_right, u, dx, dt)\n\nStep Burgers' equation according to Godunov's method\n\nArguments\n\nu_next              : Array to store the value\nboundary_flux       : Array of boundary flux storage\nboundary_flux_right : Array of right boundary flux storage\nu                   : Array of values for the previous timestep\ndx                  : Spatial grid size\ndt                  : Temporal grid size\n\nReturns\n\nAn array of values for the next timestep\n\nNotes\n\nAssumes periodic boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.riemann_solver_burgers!-Tuple{Any, Any}","page":"Home","title":"BayesianShockEstimation.riemann_solver_burgers!","text":"riemann_solver_burgers!(boundary_flux_right, u)\n\nSolve for all right boundary flux values.\n\nArguments\n\nboundary_flux_right : Output Array\nu                   : State Values\n\n\n\n\n\n","category":"method"},{"location":"#BayesianShockEstimation.riemann_solver_burgers-Tuple{Any, Any}","page":"Home","title":"BayesianShockEstimation.riemann_solver_burgers","text":"riemann_solver_burgers(ul, ur)\n\nSolves the Riemann problem for Burgers' equation and returns the average value. Helper function for Godunov's scheme.\n\nArguments\n\nul : The left state value\n`ur  : The right state value\n\nReturns\n\nThe value of flux on the boundary between the regions.\n\n\n\n\n\n","category":"method"}]
}
